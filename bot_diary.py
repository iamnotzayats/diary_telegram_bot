import logging
import os
import markup as nav

from aiogram import Bot, Dispatcher, executor, types

API_TOKEN = os.getenv('access_token')

# Configure logging
logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.answer(f"üì¨–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}\n\n"
                        f"–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—éüîé\n\n"
                        f"üìÜ –û —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏\n"
                        f"üìú –ü–æ—Å—Ç—ã —Å –≥—Ä—É–ø–ø—ã Computer-Center\n"
                        f"üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∑–¥–∞–Ω–∏–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞", reply_markup=nav.mainMenu)

@dp.message_handler()
async def echo(message: types.Message):
    if(message.text == 'üìÜ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ'):
        await bot.send_message(message.from_user.id, '–ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
    elif message.text == 'üìú –ü–æ—Å—Ç—ã —Å –≥—Ä—É–ø–ø—ã Computer-Center':
        await bot.send_message(message.from_user.id, '–ó–¥–µ—Å—å –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ—Å—Ç—ã')
    elif message.text == 'üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∑–¥–∞–Ω–∏–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞':
        await bot.send_message(message.from_user.id, '–ó–¥–µ—Å—å –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–¥–∞–Ω–∏—è —É–Ω–∏–≤–µ—Ä–∞')


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)